using Extension.Models;
using Extension.String;
using System.Collections.Generic;
using System.Linq;

namespace Aibe.Models.Core {
  public class AutoGeneratedColumnInfo : CommonBaseInfo { //Only applied for CREATE action
    public Dictionary<string, string> TableColumnPairs { get; private set; } = new Dictionary<string, string>();
    //ColumnName1=OtherTableName11:OtherColumnName11,OtherTableName12:OtherColumnName12,...;
    public AutoGeneratedColumnInfo(string desc) : base(desc) {
      if (!HasRightSide)
        return;
      var rightParts = RightSide.GetTrimmedNonEmptyParts(',');
      foreach (var rightPart in rightParts) {
        var pairs = rightPart.GetTrimmedNonEmptyParts(':');
        if (pairs.Count < 2)
          continue;
        TableColumnPairs.Add(pairs[0], pairs[1]); //adds every valid pair, unchecked here
      }
    }
  }
}

//private static List<string> allowedAutoGenerated = new List<string> { DH.CreateActionName, DH.EditActionName }; //only allows create and edit actions for now
//public List<string> AppliedRowActions { get; private set; } = new List<string> { DH.CreateActionName, DH.EditActionName };
//ColumnName2=OtherTableName21:OtherColumnName22;...
//int index = Name.IndexOf('|'); //check if Name = ColumnName2|RowAction21,RowAction22,...
//if (index >= 0) { //has the row actions described
//  string name = Name.Substring(0, index);
//  if (desc.Length > index + 1) { //rr|th -> index = 2, index + 1 = 3, desc length must be minimum of 4
//    string rowActionsDesc = Name.Substring(index + 1); //RowAction21,RowAction22,...
//    List<string> rowActions = rowActionsDesc.GetTrimmedNonEmptyParts(',')
//      .Select(x => allowedAutoGenerated.FirstOrDefault(y => y.EqualsIgnoreCase(x)))
//      .Where(x => x != null).ToList(); //only takes valid row actions
//    if (rowActions.Any())
//      AppliedRowActions = rowActions;
//  }
//  Name = name; //correct the name to only the left most part of the description
//} //else, let the name be