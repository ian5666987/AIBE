using Aibe.Helpers;
using Aibe.Models.Core;
using Extension.String;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace Aibe.Models {
  public class BaseTableModel {
    public MetaInfo Meta { get; private set; }

    public BaseTableModel(MetaInfo meta, Dictionary<string, string> stringDictionary) {
      if (meta == null)
        throw new ArgumentNullException(LCZ.I_MetaInfo, LCZ.NFE_MetaInfoCannotBeNull);
      this.Meta = meta;
      UnorderedData = stringDictionary;
      if (Meta.HasScriptColumn) //Now, based on this object dictionary, we can actually send it to the script column, if there is any
        ScTables = Meta.ScriptColumns.Select(x => new ScTableInfo(x, stringDictionary))
          .Where(x => x.IsValid).ToList();
      if (stringDictionary != null) //make sequence of data as long as this is not null
        SequencedItems = LogicHelper.SequenceDataFromStringDictionary(Meta.ColumnSequence, stringDictionary);
    }

    public string GetData(string columnName, bool nullAllowed = true) {
      if (string.IsNullOrWhiteSpace(columnName))
        return null;
      //"Cid" must be "Equals"
      //only if columnName is "Cid" then we will return "0" instead of null
      return UnorderedData != null && UnorderedData.ContainsKey(columnName) ? UnorderedData[columnName] : columnName.Equals(DH.Cid) ? "0" : nullAllowed ? null : string.Empty;
    }

    public string GetTime(string columnName, DateTime? dtVal) {
      if (UnorderedData != null && UnorderedData.ContainsKey(columnName)) //if it exists in the dictionary, take it from there first
        return UnorderedData[columnName];
      return dtVal.HasValue ? dtVal.Value.ToString(DH.DefaultTimeFormat) : null; //otherwise, check if the dtVal has value. If it has, pass it, otherwise, leave it as null.
    }

    //taken directly from meta
    public string TableName { get { return Meta.TableName; } }
    public string TableSource { get { return Meta.TableSource; } }
    public string TableDisplayName { get { return Meta.TableDisplayName; } }
    public List<KeyValuePair<string, string>> SequencedItems { get; private set; }
    public Dictionary<string, string> UnorderedData { get; private set; }
    public List<AutoGeneratedColumnInfo> AutoGeneratedColumns { get { return Meta.AutoGeneratedColumns; } } //not needed, provided by meta

    //Only applied for ScriptColumns
    public List<ScTableInfo> ScTables { get; set; } = new List<ScTableInfo>();
    public bool GroupDetailsOrigin { get; set; } //to indicate if the origin of this BaseTableModel is from group details or not
    //especially useful for actions like create and edit

    public ScTableInfo GetScTable(string columnName) {
      if (ScTables == null || !ScTables.Any(x => x.ScInfo.Name.EqualsIgnoreCase(columnName)))
        return null;
      return ScTables.FirstOrDefault(x => x.ScInfo.Name.EqualsIgnoreCase(columnName));
    }
  }
}