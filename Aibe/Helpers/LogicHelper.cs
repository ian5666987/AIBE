using Aibe.Models;
using Extension.Database.SqlServer;
using Extension.Models;
using Extension.String;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

namespace Aibe.Helpers {
  public class LogicHelper {
    public static Dictionary<string, string> ObjectDictionaryToStringDictionary(Dictionary<string, object> objectDictionary) {
      if (objectDictionary == null)
        return null;
      Dictionary<string, string> stringDictionary = new Dictionary<string, string>();
      foreach (var item in objectDictionary)
        stringDictionary.Add(item.Key, item.Value == null || item.Value is DBNull ? null : item.Value.ToString());
      return stringDictionary;
    }

    public static List<KeyValuePair<string, string>> SequenceDataFromStringDictionary(List<string> columnSequence, Dictionary<string, string> stringDict) {
      List<KeyValuePair<string, string>> sequenceData = new List<KeyValuePair<string, string>>();
      if (columnSequence != null && columnSequence.Any()) {
        var arrangedColumns = columnSequence.Where(x => stringDict.ContainsKey(x));
        foreach (var item in arrangedColumns)
          sequenceData.Add(new KeyValuePair<string, string>(item, stringDict[item]));
        foreach (var key in stringDict.Keys.Except(arrangedColumns))
          sequenceData.Add(new KeyValuePair<string, string>(key, stringDict[key]));
      } else
        foreach (var key in stringDict.Keys)
          sequenceData.Add(new KeyValuePair<string, string>(key, stringDict[key]));
      return sequenceData;
    }

    public static BaseScriptModel CreateUpdateScriptModel(string tableSource, int cid, 
      CompleteKeyInfo completeKeyInfo, Dictionary<string, string> dictCollections, DateTime refNow) {
      StringBuilder updateScript = new StringBuilder(string.Concat("UPDATE [", tableSource, "] SET "));
      string whereScript = string.Concat(" WHERE [", DH.Cid, "] = ", cid);

      int count = 0;
      List<SqlParameter> pars = new List<SqlParameter>();
      foreach (var validKeyInfo in completeKeyInfo.ValidKeys)
        if (!validKeyInfo.IsAutoGenerated)
          addUpdateParameter(updateScript, validKeyInfo, pars, dictCollections, refNow, ref count);

      foreach (var nullifiedKeyInfo in completeKeyInfo.NullifiedKeys.Where(x => !x.PureKeyName.EqualsIgnoreCase(DH.Cid)))
        if (nullifiedKeyInfo.IsTimeStamp) //If it is a TimeStamp, update it
          addUpdateParameter(updateScript, nullifiedKeyInfo, pars, dictCollections, refNow, ref count);
        else if (nullifiedKeyInfo.IsAutoGenerated) {
          //do nothing! cannot be changed with edit
        } else
          addNullUpdateParameter(updateScript, nullifiedKeyInfo, ref count);

      return new BaseScriptModel(string.Concat(updateScript, whereScript), pars);
    }

    public static BaseScriptModel CreateInsertScriptModel(string tableSource,
      CompleteKeyInfo completeKeyInfo, Dictionary<string, string> dictCollections, DateTime refNow, MetaInfo meta) {
      StringBuilder openingScript = new StringBuilder(string.Concat("INSERT INTO [", tableSource, "] ("));
      StringBuilder insertParNamesScript = new StringBuilder();

      int count = 0;
      List<SqlParameter> pars = new List<SqlParameter>();
      foreach (var validKeyInfo in completeKeyInfo.ValidKeys)
        addInsertParameter(openingScript, insertParNamesScript, validKeyInfo, pars, dictCollections, refNow, ref count, meta);

      foreach (var nullifiedKeyInfo in completeKeyInfo.NullifiedKeys) { //This is needed in case any of the nullified key info is actually among the timestamp columns
        if (nullifiedKeyInfo.IsTimeStamp) //for create, if it is timestamp, then creates it no matter what
          addInsertParameter(openingScript, insertParNamesScript, nullifiedKeyInfo, pars, dictCollections, refNow, ref count, meta); //inside, the time stamp is taken cared of
        if (nullifiedKeyInfo.IsAutoGenerated) //for create, if it is timestamp, then creates it no matter what
          addInsertParameter(openingScript, insertParNamesScript, nullifiedKeyInfo, pars, dictCollections, refNow, ref count, meta);
        //TODO not needed for now, but just in case
      }

      return new BaseScriptModel(string.Concat(
          openingScript, ") VALUES (", insertParNamesScript.ToString(), "); SELECT SCOPE_IDENTITY()"), pars);
    }

    private static KeyValuePair<string, object> getGeneratedPair(KeyInfo keyInfo, bool forGroupMaking, Dictionary<string, string> dictCollections, DateTime refNow, MetaInfo meta) {
      List<KeyValuePair<string, string>> tableColumnNamePairs = KeyInfo.GetTableColumnPairs(meta, keyInfo.PureKeyName);
      var value = keyInfo.ExtractValueAsObject(dictCollections, refNow, filterStyle: false, tableColumnNamePairs: tableColumnNamePairs, forGroupMaking: forGroupMaking);
      return new KeyValuePair<string, object>(keyInfo.Key, value);
    }

    public static List<KeyValuePair<string, object>> GetAllAutoGeneratedPairs(string tableSource, bool forGroupMaking,
      CompleteKeyInfo completeKeyInfo, Dictionary<string, string> dictCollections, DateTime refNow, MetaInfo meta) {
      List<KeyValuePair<string, object>> pairs = new List<KeyValuePair<string, object>>();
      foreach (var keyInfo in completeKeyInfo.ValidKeys)
        pairs.Add(getGeneratedPair(keyInfo, forGroupMaking, dictCollections, refNow, meta));
      foreach (var nullifiedKeyInfo in completeKeyInfo.NullifiedKeys)
        if (nullifiedKeyInfo.IsAutoGeneratedByGroup || nullifiedKeyInfo.IsTimeStampByGroup)
          pairs.Add(getGeneratedPair(nullifiedKeyInfo, forGroupMaking, dictCollections, refNow, meta));
      return pairs;
    }

    public static Dictionary<string, object> FillDetailsFromTableToObjectDictionary(string tableSource, int cid) {
      Dictionary<string, object> dict = new Dictionary<string, object>();

      //Script making
      StringBuilder queryScript = new StringBuilder(string.Concat("SELECT * FROM [", tableSource, "] WHERE [", DH.Cid, "] = ", cid));
      DataTable dataTable = SQLServerHandler.GetDataTable(DH.DataDBConnectionString, queryScript.ToString()); //new DataTable();

      if (dataTable != null && dataTable.Rows.Count > 0) //only if there is some result
        foreach (DataColumn column in dataTable.Columns)
          dict.Add(column.ColumnName, dataTable.Rows[0][column]);
      return dict;
    }

    public static void DeleteItem(string tableSource, int cid) {
      StringBuilder queryScript = new StringBuilder(string.Concat("DELETE FROM [", tableSource, "] WHERE [", DH.Cid, "] = ", cid));
      SQLServerHandler.ExecuteScript(DH.DataDBConnectionString, queryScript.ToString());
    }

    public static void DeleteGroup(string tableSource, List<KeyValuePair<string, object>> identifiers) {
      StringBuilder queryScript = new StringBuilder(string.Concat("DELETE FROM [", tableSource, "] WHERE "));
      List<SqlParameter> pars = new List<SqlParameter>();
      int index = 0;
      foreach(var identifier in identifiers) {
        if (index > 0)
          queryScript.Append(" AND ");
        string parName = "@deletePar" + index;
        object item = identifier.Value;
        SqlParameter par = new SqlParameter(parName, item ?? DBNull.Value);
        pars.Add(par);
        queryScript.Append(string.Concat("[", identifier.Key ,"]=", parName));
        ++index;
      }
      SQLServerHandler.ExecuteScript(DH.DataDBConnectionString, queryScript.ToString(), pars);
    }

    private static void addInsertParameter(StringBuilder openingScript, StringBuilder insertParNamesScript,
      KeyInfo keyInfo, List<SqlParameter> pars, Dictionary<string, string> collections, DateTime refDtNow, ref int parNo, MetaInfo meta) {
      if (parNo > 0) {
        openingScript.Append(",");
        insertParNamesScript.Append(",");
      };

      List<KeyValuePair<string, string>> tableColumnNamePairs = KeyInfo.GetTableColumnPairs(meta, keyInfo.PureKeyName);
      var value = keyInfo.ExtractValueAsObject(collections, refDtNow, filterStyle: false, tableColumnNamePairs: tableColumnNamePairs);
      openingScript.Append(string.Concat("[", keyInfo.Key, "]"));
      string parName = string.Concat("@par", parNo);
      insertParNamesScript.Append(parName);
      SqlParameter par = new SqlParameter(parName, value);
      pars.Add(par);
      parNo++;
    }

    private static void addNullUpdateParameter(StringBuilder updateScript, KeyInfo nullifiedKeyInfo, ref int parNo) {
      if (parNo > 0)
        updateScript.Append(",");
      updateScript.Append(string.Concat("[", nullifiedKeyInfo.PureKeyName, "] = ", DH.NULL));
    }

    private static void addUpdateParameter(StringBuilder updateScript, KeyInfo validKeyInfo,
      List<SqlParameter> pars, Dictionary<string, string> collections, DateTime refDtNow, ref int parNo) {
      if (parNo > 0)
        updateScript.Append(",");
      object value = validKeyInfo.ExtractValueAsObject(collections, refDtNow, filterStyle: false);
      string parName = string.Concat("@par", parNo);
      updateScript.Append(string.Concat("[", validKeyInfo.PureKeyName, "] = ", parName));
      SqlParameter par = new SqlParameter(parName, value);
      pars.Add(par);
      parNo++;
    }
  }
}
